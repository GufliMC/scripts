import java.util.jar.JarFile

def excludeRelocation = ext.find("excludeRelocation");
if ( excludeRelocation == null ) {
    excludeRelocation = []
}

shadowJar {
    def packages = new HashSet<String>()
    project.configurations.runtimeClasspath.files.forEach(jar -> {
        if ( project.parent.childProjects.containsKey('api') && project.parent.childProjects.get('api')
                .configurations.runtimeClasspath.files.contains(jar) ) {
            return;
        }

        try (JarFile jf = new JarFile(jar)) {
            jf.stream()
                    .map(entry -> entry.name)
                    .filter(n -> n != "module-info.class")
                    .filter(n -> !n.startsWith("META-INF"))
                    .filter(n -> n.endsWith(".class"))
                    .map(n -> n.substring(0, n.lastIndexOf('/')).replaceAll('/', '.'))
                    .forEach(n -> packages.add(n))
        }
    })
    packages.removeIf(p -> p.startsWith(project.group.toString()))
    packages.removeIf(p -> excludeRelocation.stream().anyMatch(p::startsWith))
    for (lib in packages) {
        relocate lib, "${project.group}.lib.${lib}"
    }
}